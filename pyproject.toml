[tool.poetry]
name = "validate-telegram-markdown"
version = "0.0.0"
description = "Validate Telegram flavored markdown"
authors = ["skarrok <skarrork.h@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/skarrok/validate-telegram-markdown"
repository = "https://github.com/skarrok/validate-telegram-markdown"
keywords = ["telegram", "markdown", "validate"]
classifiers = [
    "Environment :: Console",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Utilities",
]
include = [
    "LICENSE",
]

[tool.poetry.dependencies]
python = "^3.10"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true

[tool.poetry.group.dev.dependencies]
mypy = "^1.8"
pre-commit = "^3.6.0"
ruff = "^0.5.4"
pytest = "^8.3.2"
pytest-cov = "^5.0.0"

[tool.ruff]
line-length = 80

[tool.ruff.lint]
select = [
        "ASYNC", # flake8-async
        "B",     # flake8-bugbear
        "BLE",   # flake8-blind-except
        "C4",    # flake8-comprehensions
        "C90",   # mccabe
        "COM",   # flake8-commas
        "DTZ",   # flake8-datetimez
        "EM",    # flake8-errmsg
        "E",     # pycodestyle
        "ERA",   # flake8-eradicate
        "EXE",   # flake8-executable
        "FLY",   # flynt
        "F",     # pyflakes
        "G",     # flake8-logging-format
        "ICN",   # flake8-import-convensions
        "I",     # isort
        "INP",   # flake8-no-pep420
        "INT",   # flake8-gettext
        "ISC",   # flake8-implicit-str-concat
        "N",     # pep8-naming
        "PERF",  # perflint
        "PGH",   # pygrep-hooks
        "PIE",   # flake8-pie
        "PL",    # pylint
        "PT",    # flake8-pytest-style
        "Q",     # flake8-quotes
        "RSE",   # flake8-raise
        "RUF",   # ruff
        "S",     # flake8-bandit
        "SIM",   # flkae8-simplify
        "SLF",   # flake8-self
        "SLOT",  # flake8-slots
        "T10",   # flake8-debugger
        "T20",   # flake8-print
        "TCH",   # flake8-type-checking
        "TID",   # flake8-tidy-imports
        "TRY",   # tryceratops
        "UP",    # pyupgrade
        "W",     # pycodestyle
        "YTT",   # flake8-2020
]
ignore = [
        # for format compatibility
        "COM812", # missing-trailing-comma
        "E501",   # line-too-long
        "ISC001", # single-line-implicit-string-concatenation
        "Q000",   # bad-quotes-inline-string

        # annoying
        "PLR0913", # too-many-arguments
        "PLR0915", # too-many-statements
        "PLR2004", # magic-value-comparison
]

[tool.ruff.lint.per-file-ignores]
"**/test*" = [
        "S101", # assert
]

[tool.ruff.lint.isort]
combine-as-imports = true
order-by-type = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_any_generics = true
no_implicit_reexport = false
exclude = ["^venv/", "^\\.venv/"]

[tool.pytest.ini_options]
addopts = "-v --failed-first --exitfirst --showlocals"
python_files = "tests.py test_*.py"
python_functions = "test_*"
testpaths = ["tests"]

[tool.coverage.run]
source = ["."]
branch = true
parallel = true
omit = [".venv/*", "venv/*", "tests/*"]

[tool.coverage.report]
fail_under = 80
show_missing = true
skip_covered = true
